import{c as i}from"./authStore-Bl6YCSMu.js";const s="http://localhost:8000",l=async a=>{const e=await fetch(`${s}/api/stores`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a),credentials:"include"}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to create store");return t},d=async a=>{const e=await fetch(`${s}/api/stores/${a.storeId}/products`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a),credentials:"include"}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to create store");return t},h=async(a,e=10)=>{const t=await fetch(`${s}/api/stores?page=${a}&limit=${e}`,{method:"GET",headers:{"Content-Type":"application/json"}}),o=await t.json();if(!t.ok)throw new Error(o.message||"Failed to get all stores");return{shops:o.stores,total:o.total,totalPages:o.totalPages,currentPage:o.currentPage}},c=async(a,e=20)=>{const t=await fetch(`${s}/api/products?page=${a}&limit=${e}`,{method:"GET",headers:{"Content-Type":"application/json"}}),o=await t.json();if(!t.ok)throw new Error(o.message||"Failed to get all products");return{products:o.products,total:o.total,totalPages:o.totalPages,currentPage:o.currentPage}},u=async a=>{const e=await fetch(`${s}/api/store/${a}`,{method:"GET"}),t=await e.json(),o=t.store;if(!e.ok)throw new Error(t.message||"Something went wrong");return o},g=async(a,e)=>{const t=await fetch(`${s}/api/store/${a}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e),credentials:"include"}),o=await t.json(),r=o.store;if(!t.ok)throw new Error(o.message||"Failed to update user info");return r},w=async a=>{const e=await fetch(`${s}/api/store/${a}`,{method:"DELETE",headers:{"Content-Type":"application/json"},credentials:"include"}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to update user info");return t},f=i(a=>({products:[],loading:!1,page:1,total:0,totalPages:1,fetchProducts:async(e=1,t)=>{a({loading:!0});try{const{products:o,total:r,totalPages:n}=await c(e,t);a({products:o,total:r,page:e,totalPages:n})}catch(o){console.error("Failed to fetch products:",o)}finally{a({loading:!1})}},createProduct:async e=>{await d(e);const t=1,{products:o,total:r,totalPages:n}=await c(t);a({products:o,total:r,totalPages:n})}}));export{g as a,u as b,l as c,w as d,h as g,f as u};
